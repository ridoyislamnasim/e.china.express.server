// User role enum
enum UserRole {
  customer
  user
  admin
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  phone             String?         @unique
  password          String
  name              String?
  isVerified        Boolean         @default(false)
  // Relations
  wishlist          Wishlist[]
  cart              Cart[]
  orders            Order[]
  productReviews    ProductReview[]
  managedWarehouses Warehouse[]     @relation("UserManagedWarehouses")
  roleId            Int?
  role              Role?           @relation(fields: [roleId], references: [id])
  addressId         Int?
  address           Address?        @relation(fields: [addressId], references: [id])
  buyNowCarts       BuyNowCart[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Role {
  id           Int         @id @default(autoincrement())
  role         String      @unique
  permissionId Int?
  permission   Permission? @relation(fields: [permissionId], references: [id])
  users        User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@map("roles")
}

model Permission {
  id            Int   @id @default(autoincrement())

  // aboutUs permissions
  aboutUsAccess  Boolean @default(false)
  aboutUsCreate  Boolean @default(false)
  aboutUsUpdate  Boolean @default(false)
  aboutUsDelete  Boolean @default(false)

  // banner permissions
  bannerAccess   Boolean @default(false)
  bannerCreate   Boolean @default(false)
  bannerUpdate   Boolean @default(false)
  bannerDelete   Boolean @default(false)

  // category permissions
  categoryAccess Boolean @default(false)
  categoryCreate Boolean @default(false)
  categoryUpdate Boolean @default(false)
  categoryDelete Boolean @default(false)

  // subCategory permissions
  subCategoryAccess Boolean @default(false)
  subCategoryCreate Boolean @default(false)
  subCategoryUpdate Boolean @default(false)
  subCategoryDelete Boolean @default(false)

  // chilsCategory permissions (kept existing name)
  chilsCategoryAccess Boolean @default(false)
  chilsCategoryCreate Boolean @default(false)
  chilsCategoryUpdate Boolean @default(false)
  chilsCategoryDelete Boolean @default(false)

  // order permissions
  orderAccess    Boolean @default(false)
  orderCreate    Boolean @default(false)
  orderUpdate    Boolean @default(false)
  orderDelete    Boolean @default(false)

  // user permissions
  userAccess     Boolean @default(false)
  userCreate     Boolean @default(false)
  userUpdate     Boolean @default(false)
  userDelete     Boolean @default(false)

  roles Role[]
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  state   String
  country String
  zipCode String
  users   User[]

  @@map("addresses")
}

model Wishlist {
  id           Int      @id @default(autoincrement())
  userRef      User?    @relation(fields: [userRefId], references: [id])
  userRefId    Int?
  productRef   Product? @relation("ProductToWishlist", fields: [productRefId], references: [id])
  productRefId Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WarehouseTransfer {
  id                 Int       @id @default(autoincrement())
  fromWarehouseRef   Warehouse @relation("FromWarehouse", fields: [fromWarehouseRefId], references: [id])
  fromWarehouseRefId Int
  toWarehouseRef     Warehouse @relation("ToWarehouse", fields: [toWarehouseRefId], references: [id])
  toWarehouseRefId   Int
  inventoryRef       Inventory @relation(fields: [inventoryRefId], references: [id])
  inventoryRefId     Int
  quantity           Int
  status             String    @default("Pending")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model SubCategory {
  id              Int             @id @default(autoincrement())
  name            String?
  image           String?
  bannerImage     String?
  slug            String?         @unique
  status          Boolean         @default(true)
  categoryRef     Category?       @relation(fields: [categoryRefId], references: [id])
  categoryRefId   Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  childCategories ChildCategory[]
  products        Product[]
  coupons         Coupon[]        @relation("SubCategoryToCoupon")
}

model ShippingMethod {
  id             Int      @id @default(autoincrement())
  shippingMethod String?
  rate           Float?
  status         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Warehouse {
  id           Int      @id @default(autoincrement())
  name         String
  location     String?
  managerRef   User?    @relation("UserManagedWarehouses", fields: [managerRefId], references: [id])
  managerRefId Int?
  contact      String?
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  fromWarehouseTransfers WarehouseTransfer[] @relation("FromWarehouse")
  toWarehouseTransfers   WarehouseTransfer[] @relation("ToWarehouse")
  inventories            Inventory[]
}

model SubChildCategory {
  id                 Int            @id @default(autoincrement())
  name               String?
  image              String?
  slug               String?
  status             Boolean        @default(true)
  childCategoryRef   ChildCategory? @relation(fields: [childCategoryRefId], references: [id])
  childCategoryRefId Int?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  products           Product[]      @relation("SubChildCategoryToProduct")
}

model ChildCategory {
  id                 Int                @id @default(autoincrement())
  name               String?
  image              String?
  slug               String?
  status             Boolean            @default(true)
  subCategoryRef     SubCategory?       @relation(fields: [subCategoryRefId], references: [id])
  subCategoryRefId   Int?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  subChildCategories SubChildCategory[]
  products           Product[]          @relation("ChildCategoryToProduct")
}

model ProductReview {
  id           Int      @id @default(autoincrement())
  image        String?
  name         String?
  rating       Int?
  comment      String?
  status       Boolean  @default(true)
  userRef      User?    @relation(fields: [userRefId], references: [id])
  userRefId    Int?
  productRef   Product? @relation(fields: [productRefId], references: [id])
  productRefId Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id                    Int               @id @default(autoincrement())
  productId             String?
  SKU                   String?           @unique
  name                  String?
  description           String?
  isDiscounted          Boolean           @default(false)
  discountType          String?
  discount              Float?
  costPrice             Float?
  price                 Float?
  mrpPrice              Float?
  discountAmount        Float?
  weight                Float?
  thumbnailImage        String
  backViewImage         String?
  images                String[]
  sizeChartImage        String?
  videoUrl              String?
  status                Boolean?          @default(true)
  slug                  String?           @unique
  freeShipping          Boolean           @default(false)
  brandRef              Brand?            @relation(fields: [brandRefId], references: [id])
  brandRefId            Int?
  mainInventory         Int?
  gender                String?
  inventoryType         String?
  categoryRef           Category?         @relation("CategoryToProduct", fields: [categoryRefId], references: [id])
  categoryRefId         Int?
  subCategoryRef        SubCategory?      @relation(fields: [subCategoryRefId], references: [id])
  subCategoryRefId      Int?
  childCategoryRef      ChildCategory?    @relation("ChildCategoryToProduct", fields: [childCategoryRefId], references: [id])
  childCategoryRefId    Int?
  subChildCategoryRef   SubChildCategory? @relation("SubChildCategoryToProduct", fields: [subChildCategoryRefId], references: [id])
  subChildCategoryRefId Int?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  wishlists             Wishlist[]        @relation("ProductToWishlist")
  inventories           Inventory[]
  productReviews        ProductReview[]
  carts                 Cart[]            @relation("ProductToCart")
  buyNowCarts           BuyNowCart[]      @relation("ProductToCart")
  publishStatus         String?           @default("Publish") // Add publish status with default value
  viewProduct           Int?              @default(0) // Add view count with default value
  orderProducts         OrderProduct[]
}

model Policy {
  id        Int      @id @default(autoincrement())
  details   String?
  type      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentServiceConfig {
  id            Int      @id @default(autoincrement())
  serviceMethod String?  @default("STEADFAST")
  baseUrl       String?
  userName      String?
  apiKey        String?
  secretKey     String?
  clientKey     String?
  clientId      String?
  clientSecret  String?
  email         String?
  password      String?
  grantType     String?
  status        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OrderProduct {
  id             Int       @id @default(autoincrement())
  order          Order     @relation(fields: [orderId], references: [id])
  orderId        Int
  productRef     Product   @relation(fields: [productRefId], references: [id])
  productRefId   Int
  inventoryRef   Inventory @relation("InventoryToOrderProduct", fields: [inventoryRefId], references: [id])
  inventoryRefId Int
  quantity       Int
  price          Float?
  mrpPrice       Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Order {
  id               Int            @id @default(autoincrement())
  orderId          String         @unique
  subTotalPrice    Float?
  totalPrice       Float?
  shippingCost     Float?         @default(0)
  couponRef        Coupon?        @relation(fields: [couponRefId], references: [id])
  couponRefId      Int?
  userRef          User?          @relation(fields: [userRefId], references: [id])
  userRefId        Int?
  correlationId    String?
  customerName     String?
  customerPhone    String?
  customerEmail    String?
  customerCity     String?
  customerAddress  String?
  customerHouse    String?
  customerRoad     String?
  customerThana    String?
  customerAltPhone String?
  paymentMethod    String?        @default("CashOnDelivery")
  couponDiscount   Float?         @default(0)
  status           String?        @default("OrderPlaced")
  isGuestUser      Boolean        @default(false)
  guestUserRef     String?
  note             String?
  isCourierSend    Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  products         OrderProduct[]
}

model OrderBulk {
  id           Int       @id @default(autoincrement())
  name         String
  email        String?
  phone        String
  address      String?
  companyName  String?
  productType  String?
  deliveryDate DateTime?
  quantity     Int?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Coupon {
  id               Int          @id @default(autoincrement())
  code             String?      @unique
  discount         Float?
  useLimit         Int?         @default(0)
  used             Int?         @default(0)
  startDate        DateTime?
  expireDate       DateTime?
  discountType     String?
  brandRef         Brand?       @relation(fields: [brandRefId], references: [id])
  brandRefId       Int?
  categoryRef      Category?    @relation(fields: [categoryRefId], references: [id])
  categoryRefId    Int?
  subCategoryRef   SubCategory? @relation("SubCategoryToCoupon", fields: [subCategoryRefId], references: [id])
  subCategoryRefId Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  orders    Order[]
  campaigns Campaign[] @relation("CouponToCampaign")
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id                Int        @id @default(autoincrement())
  productRef        Product?   @relation(fields: [productRefId], references: [id])
  productRefId      Int?
  warehouseRef      Warehouse? @relation(fields: [warehouseRefId], references: [id])
  warehouseRefId    Int?
  quantity          Int?
  mrpPrice          Float?
  price             Float?
  costPrice         Float?
  discountType      String?
  discount          Float?
  discountAmount    Float?
  barcode           String?
  availableQuantity Int?
  soldQuantity      Int?       @default(0)
  holdQuantity      Int?       @default(0)
  inventoryType     String?
  color             String?
  name              String?
  level             String?
  inventoryID       String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  warehouseTransfers WarehouseTransfer[]
  carts              Cart[]
  buyNowCarts        BuyNowCart[]
  orderProducts      OrderProduct[]      @relation("InventoryToOrderProduct")
}

model ContactInfo {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?
  phone     String?
  subject   String?
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String?
  image         String?
  vectorImage   String?
  colorCode     String?
  slug          String?       @unique
  status        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]
  products      Product[]     @relation("CategoryToProduct")
  coupons       Coupon[]      @relation(fields: [], references: [])
}

model Cart {
  id             Int        @id @default(autoincrement())
  quantity       Int?
  isGuestUser    Boolean    @default(false)
  guestUserRef   String?
  correlationId  String?
  userRef        User?      @relation(fields: [userRefId], references: [id])
  userRefId      Int?
  productRef     Product?   @relation("ProductToCart", fields: [productRefId], references: [id])
  productRefId   Int?
  inventoryRef   Inventory? @relation(fields: [inventoryRefId], references: [id])
  inventoryRefId Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model BuyNowCart {
  id             Int        @id @default(autoincrement())
  quantity       Int?
  isGuestUser    Boolean    @default(false)
  guestUserRef   String?
  correlationId  String?    @unique
  userRef        User?      @relation(fields: [userRefId], references: [id])
  userRefId      Int?
  productRef     Product?   @relation("ProductToCart", fields: [productRefId], references: [id])
  productRefId   Int?
  inventoryRef   Inventory? @relation(fields: [inventoryRefId], references: [id])
  inventoryRefId Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Campaign {
  id          Int      @id @default(autoincrement())
  name        String
  couponRef   Coupon?  @relation("CouponToCampaign", fields: [couponRefId], references: [id])
  couponRefId Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogTag {
  id        Int      @id @default(autoincrement())
  title     String?
  slug      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id        Int      @id @default(autoincrement())
  image     String?
  title     String?
  slug      String?  @unique
  author    String?
  details   String?
  tags      String[]
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String?
  image     String?
  slug      String?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  coupons  Coupon[]  @relation(fields: [], references: [])
}

model AboutUs {
  id          Int      @id @default(autoincrement())
  header      String?
  title       String?
  description String?
  image       String?
  whatsapp    String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Banner {
  id         Int      @id @default(autoincrement())
  bannerType String?
  image      String?
  link       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
